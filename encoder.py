import numpy as np


class encoder():
    rm_table = np.array([[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                         [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1],
                         [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1],
                         [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1],
                         [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                         [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1],
                         [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1],
                         [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1],
                         [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1],
                         [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1],
                         [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1],
                         [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1],
                         [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1],
                         [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
                         [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1],
                         [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1],
                         [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0],
                         [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0],
                         [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                         [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
                         [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1],
                         [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1],
                         [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1],
                         [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1],
                         [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0],
                         [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1],
                         [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0],
                         [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0],
                         [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0],
                         [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                         [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

    def reed_muller_encoder(self, bits, len):

        bits = np.array(bits)
        if len < 3 and len > 11:
            print("Encoder:ReedMuller, Ivnvalid bit length")

        # Appending Zeros and repeating 32 times
        zer_t_app = 11-len

        if zer_t_app > 0:
            bits = np.concatenate((bits, np.zeros(zer_t_app)))

        bits = np.tile(bits, (32, 1))
        output = np.sum((bits*self.rm_table), 1) % 2
        return output






